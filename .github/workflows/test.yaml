name: Django ChatBotAI Test CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      GROQ_TEMPERATURE: ${{ secrets.GROQ_TEMPERATURE }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # ✅ Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures all files and history are fetched

      # ✅ Step 2: Set up Python (Match Local Version)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      # ✅ FIX: Correctly placed "Create .env file" inside "steps"
      - name: Create .env file
        run: |
          echo "POSTGRES_VERSION=${{ secrets.POSTGRES_VERSION }}" >> .env
          echo "DRIVER=${{ secrets.DRIVER }}" >> .env
          echo "DBHOST=${{ secrets.DBHOST }}" >> .env
          echo "DBPORT=${{ secrets.DBPORT }}" >> .env
          echo "DBNAME=${{ secrets.DBNAME }}" >> .env
          echo "DBUSER=${{ secrets.DBUSER }}" >> .env
          echo "DBPASSWORD=${{ secrets.DBPASSWORD }}" >> .env
          echo "DJANGO_SECRET=${{ secrets.DJANGO_SECRET }}" >> .env
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> .env
          echo "MODEL_MIXTRAL_7B=${{ secrets.MODEL_MIXTRAL_7B }}" >> .env
          echo "MODEL_LLAMA3_8B=${{ secrets.MODEL_LLAMA3_8B }}" >> .env
          echo "MODEL_LLAMA3_70B=${{ secrets.MODEL_LLAMA3_70B }}" >> .env
          echo "MODEL_LLAMA3_8B_TOOL_USE=${{ secrets.MODEL_LLAMA3_8B_TOOL_USE }}" >> .env
          echo "MODEL_LLAMA3_70B_TOOL_USE=${{ secrets.MODEL_LLAMA3_70B_TOOL_USE }}" >> .env
          echo "MODEL_LLAMA3_3_70B_VERSATILE=${{ secrets.MODEL_LLAMA3_3_70B_VERSATILE }}" >> .env
          echo "MODEL_LLAMA3_VISION_LARGE=${{ secrets.MODEL_LLAMA3_VISION_LARGE }}" >> .env
          echo "MODEL_GEMMA_7B=${{ secrets.MODEL_GEMMA_7B }}" >> .env
          echo "MODEL_MIXTRAL_LARGER=${{ secrets.MODEL_MIXTRAL_LARGER }}" >> .env
          echo "GROQ_MAX_TOKEN=${{ secrets.GROQ_MAX_TOKEN }}" >> .env
          echo "GROQ_TEMPERATURE=${{ secrets.GROQ_TEMPERATURE }}" >> .env
          echo "GROQ_TEMPERATURE_CREATIVE=${{ secrets.GROQ_TEMPERATURE_CREATIVE }}" >> .env
          echo "SSL_DIR=${{ secrets.SSL_DIR }}" >> .env
          echo "USER=${{ secrets.USER }}" >> .env
          echo "NGINX_USER=${{ secrets.NGINX_USER }}" >> .env
          echo "GROUP=${{ secrets.GROUP }}" >> .env
          echo "PROJECT_DIR=${{ secrets.PROJECT_DIR }}" >> .env
          echo "WORKERS=${{ secrets.WORKERS }}" >> .env
          echo "GUNICORN_BINARY=${{ secrets.GUNICORN_BINARY }}" >> .env
          echo "WORKERS=${{ secrets.WORKERS }}" >> .env
          echo "SOCK_FILE_DIR=${{ secrets.SOCK_FILE_DIR }}" >> .env
          echo "SOCK_FILE_NAME=${{ secrets.SOCK_FILE_NAME }}" >> .env
          echo "PROJECT_WSGI=${{ secrets.PROJECT_WSGI }}" >> .env
          echo "SUDO_PASSWORD=${{ secrets.SUDO_PASSWORD }}" >> .env
          echo "NGINX_IMAGE=${{ secrets.NGINX_IMAGE }}" >> .env
          echo "VIRTUAL_ENV_PATH_FROM_USER_HOME=${{ secrets.VIRTUAL_ENV_PATH_FROM_USER_HOME }}" >> .env
          echo "LOGS_FOLDER_PATH=${{ secrets.LOGS_FOLDER_PATH }}" >> .env
          echo "GUNICORN_CENTRAL_DIR=${{ secrets.GUNICORN_CENTRAL_DIR }}" >> .env
          echo "STATIC_DESTINATION=${{ secrets.STATIC_DESTINATION }}" >> .env
          echo "MEDIA_DESTINATION=${{ secrets.MEDIA_DESTINATION }}" >> .env
          echo "OPENSSL_CONF_FILE_PATH=${{ secrets.OPENSSL_CONF_FILE_PATH }}" >> .env

      # ✅ FIX: Correctly placed "Create .vars.env file"
      - name: Create .vars.env file
        run: |
          echo "SCORE055=${{ vars.SCORE055 }}" >> .vars.env
          echo "SCORE063=${{ vars.SCORE063 }}" >> .vars.env
          echo "TOP_N=${{ vars.TOP_N }}" >> .vars.env
          echo "RUST_LOGS_FOLDER_NAME=${{ vars.RUST_LOGS_FOLDER_NAME }}" >> .vars.env
          echo "DJANGO_LOGS_FOLDER_NAME=${{ vars.DJANGO_LOGS_FOLDER_NAME }}" >> .vars.env
          echo "FLAGS=${{ vars.FLAGS }}" >> .vars.env
          echo "PYTHON_BINARY_ENV_PATH=${{ vars.PYTHON_BINARY_ENV_PATH }}" >> .vars.env
          echo "LOG_AGENT_ANALYZER_FOLDER=${{ vars.LOG_AGENT_ANALYZER_FOLDER }}" >> .vars.env
          echo "COPY_LOGS_DESTINATION_FOLDER=${{ vars.COPY_LOGS_DESTINATION_FOLDER }}" >> .vars.env
          echo "LOGS_REPORT_CRITICAL_FILE_NAME=${{ vars.LOGS_REPORT_CRITICAL_FILE_NAME }}" >> .vars.env
          echo "LOGS_REPORT_WARNING_FILE_NAME=${{ vars.LOGS_REPORT_WARNING_FILE_NAME }}" >> .vars.env
          echo "LOGS_REPORT_ERROR_FILE_NAME=${{ vars.LOGS_REPORT_ERROR_FILE_NAME }}" >> .vars.env
          echo "LOG_JOB_OUTPUT_FILE=${{ vars.LOG_JOB_OUTPUT_FILE }}" >> .vars.env
          echo "LOG_AGENT_GRAPH_FILE_NAME=${{ vars.LOG_AGENT_GRAPH_FILE_NAME }}" >> .vars.env
          echo "LOG_ANALYZER_ADVICE_TO_SEND_DISCORD_FOLDER=${{ vars.LOG_ANALYZER_ADVICE_TO_SEND_DISCORD_FOLDER }}" >> .vars.env
          echo "LOG_AGENT_REPORTS_FOLDER=${{ vars.LOG_AGENT_REPORTS_FOLDER }}" >> .vars.env
          echo "DEFAULT_AI_PERSONALITY_TRAIT=${{ vars.DEFAULT_AI_PERSONALITY_TRAIT }}" >> .vars.env
          echo "THREAD_ID=${{ vars.THREAD_ID }}" >> .vars.env
          echo "USER_INITIAL_QUERY=${{ vars.USER_INITIAL_QUERY }}" >> .vars.env
          echo "DOCUMENT_TITLE=${{ vars.DOCUMENT_TITLE }}" >> .vars.env
          echo "AI_PERSONALITY_TRAITS=${{ vars.AI_PERSONALITY_TRAITS }}" >> .vars.env
          echo "REPHRASED_USER_QUERY=${{ vars.REPHRASED_USER_QUERY }}" >> .vars.env
          echo "BUSINESS_COLLECTION_NAME=${{ vars.BUSINESS_COLLECTION_NAME }}" >> .vars.env

      # ✅ Step 3: Install System Dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3.12-dev libpq-dev libjpeg-dev zlib1g-dev cargo rustc graphviz graphviz-dev

      # ✅ Step 4: Install Python dependencies
      - name: Install dependencies
        run: |
          python -m venv venv  # Create virtual environment
          source venv/bin/activate  # Activate virtual environment
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: bash

      # ✅ Step 5: Install Rust dependencies and build Rust module
      - name: Build Rust dependencies
        run: |
          source venv/bin/activate  # Ensure venv is activated
          pip install maturin  # Install maturin inside venv
          cd rust_lib
          maturin develop
        shell: bash

      # ✅ Step 6: Wait for PostgreSQL to be Ready
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done

      # ✅ Step 7: Run migrations
      - name: Run migrations
        env:
          DBNAME: test_db
          DBUSER: postgres
          DBPASSWORD: postgres
          DBHOST: localhost
          DBPORT: 5432
        run: |
          source venv/bin/activate  # Ensure the virtual environment is activated
          python manage.py migrate

      # ✅ Step 8: Run tests with coverage
      - name: Run tests with coverage
        env:
          DBNAME: test_db
          DBUSER: postgres
          DBPASSWORD: postgres
          DBHOST: localhost
          DBPORT: 5432
        run: |
          source venv/bin/activate  # Activate virtual environment
          coverage run --source='.' -m pytest --ds=chatbotAI.settings

      # ✅ Step 9: Generate and upload coverage report
      - name: Generate coverage report
        run: |
          source venv/bin/activate  # Activate virtual environment
          coverage report
          coverage html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov
